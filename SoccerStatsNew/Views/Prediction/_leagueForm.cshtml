@model SoccerStatsData.RequestModels.PredictionRequestFiles.PredictionResponse

<h4>league form</h4>
 
@*
    it is probably nessacary to predefine varibles like below to to the very long list
    of extentions to call. not my data structure...
*@
@{
    var hYellow1 = Model.Teams.Home.League.Cards.Yellow.FirtHalfFirst.Total;
    var hYellow2 = Model.Teams.Home.League.Cards.Yellow.FirstHalfSecond.Total;
    var hYellow3 = Model.Teams.Home.League.Cards.Yellow.FirstHalfThird.Total;

    var hYellow4 = Model.Teams.Home.League.Cards.Yellow.SecondHalfFirst.Total;
    var hYellow5 = Model.Teams.Home.League.Cards.Yellow.SecondHalfSecond.Total;
    var hYellow6 = Model.Teams.Home.League.Cards.Yellow.SecondHalfThird.Total;

    var hRed1 = Model.Teams.Home.League.Cards.Red.FirtHalfFirst.Total;
    var hRed2 = Model.Teams.Home.League.Cards.Red.FirstHalfSecond.Total;
    var hRed3 = Model.Teams.Home.League.Cards.Red.FirstHalfThird.Total;

    var hRed4 = Model.Teams.Home.League.Cards.Red.SecondHalfFirst.Total;
    var hRed5 = Model.Teams.Home.League.Cards.Red.SecondHalfSecond.Total;
    var hRed6 = Model.Teams.Home.League.Cards.Red.SecondHalfThird.Total;
   
}

@{
    var aYellow1 = Model.Teams.Away.League.Cards.Yellow.FirtHalfFirst.Total;
    var aYellow2 = Model.Teams.Away.League.Cards.Yellow.FirstHalfSecond.Total;
    var aYellow3 = Model.Teams.Away.League.Cards.Yellow.FirstHalfThird.Total;

    var aYellow4 = Model.Teams.Away.League.Cards.Yellow.SecondHalfFirst.Total;
    var aYellow5 = Model.Teams.Away.League.Cards.Yellow.SecondHalfSecond.Total;
    var aYellow6 = Model.Teams.Away.League.Cards.Yellow.SecondHalfThird.Total;

    var aRed1 = Model.Teams.Away.League.Cards.Red.FirtHalfFirst.Total;
    var aRed2 = Model.Teams.Away.League.Cards.Red.FirstHalfSecond.Total;
    var aRed3 = Model.Teams.Away.League.Cards.Red.FirstHalfThird.Total;

    var aRed4 = Model.Teams.Away.League.Cards.Red.SecondHalfFirst.Total;
    var aRed5 = Model.Teams.Away.League.Cards.Red.SecondHalfSecond.Total;
    var aRed6 = Model.Teams.Away.League.Cards.Red.SecondHalfThird.Total;

}

@(Html.Kendo().Chart()
        .Name("home-chart")
        .Title("Home Cards per minute")
        .Legend(legend => legend
        .Position(ChartLegendPosition.Top)
        )
        .ChartArea(chartArea => chartArea
        .Background("transparent")
        )
        .Series(series =>
        {
            series.Column(new int?[] { hYellow1, hYellow2, hYellow3, hYellow4, hYellow5, hYellow6 }).Name("Yellow");
            series.Column(new int?[] { hRed1, hRed2, hRed3, hRed4, hRed5, hRed6 }).Name("Red");

        })
        .CategoryAxis(axis => axis
        .Name("series-axis")
        .Line(line => line.Visible(false))
        )
        .CategoryAxis(axis => axis
        .Name("label-axis")
        .Categories("0-15", "16-30", "31-45", "46-60", "61-75", "76-90", "91-105")
        )
        .ValueAxis(axis => axis
        .Numeric()
        .Labels(labels => labels.Format("{0}"))

        // Move the label-axis all the way down the value axis
        .AxisCrossingValue(0, int.MinValue)
        )
        .Tooltip(tooltip => tooltip
        .Visible(true)
        .Format("{0}%")
        .Template("#= series.name #: #= value #")
        )
        )


@(Html.Kendo().Chart()
    .Name("away-chart")
    .Title("Away Cards per minute")
    .Legend(legend => legend
    .Position(ChartLegendPosition.Top)
    )
    .ChartArea(chartArea => chartArea
    .Background("transparent")
    )
    .Series(series =>
    {
        series.Column(new int?[] { aYellow1, aYellow2, aYellow3, aYellow4, aYellow5, aYellow6 }).Name("Yellow");
        series.Column(new int?[] { aRed1, aRed2, aRed3, hRed4, hRed5, hRed6 }).Name("Red");

    })
    .CategoryAxis(axis => axis
    .Name("series-axis")
    .Line(line => line.Visible(false))
    )
    .CategoryAxis(axis => axis
    .Name("label-axis")
    .Categories("0-15", "16-30", "31-45", "46-60", "61-75", "76-90", "91-105")
    )
    .ValueAxis(axis => axis
    .Numeric()
    .Labels(labels => labels.Format("{0}"))

    // Move the label-axis all the way down the value axis
    .AxisCrossingValue(0, int.MinValue)
    )
    .Tooltip(tooltip => tooltip
    .Visible(true)
    .Format("{0}%")
    .Template("#= series.name #: #= value #")
    )
    )